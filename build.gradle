/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/tutorial_java_projects.html
 */



apply plugin: 'c'
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'edu.cmu.sei.ttg.kalki.controller.IOTController'

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here
    mavenLocal()
    mavenCentral()
}

model {
    components {
        dlcfsm(NativeLibrarySpec) {
            sources.c.source {
                srcDir 'src/main/C'
                include '**/dlcfsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libdlcfsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        phlefsm(NativeLibrarySpec){
            sources.c.source {
                srcDir 'src/main/C'
                include '**/phlefsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libphlefsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        untsfsm(NativeLibrarySpec){
            sources.c.source {
                srcDir 'src/main/C'
                include '**/untsfsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libuntsfsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        wemofsm(NativeLibrarySpec){
            sources.c.source {
                srcDir 'src/main/C'
                include '**/wemofsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libwemofsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        viziotvfsm(NativeLibrarySpec){
            sources.c.source {
                srcDir 'src/main/C'
                include '**/viziotvfsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libviziofsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        roombafsm(NativeLibrarySpec){
            sources.c.source {
                srcDir 'src/main/C'
                include '**/roombafsm.c'
            }
            sources.c.exportedHeaders {
                srcDir "src/main/C"
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    cCompiler.args '-o', "libroombafsm.dylib"
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/dlcfsm/shared:" +
            "${buildDir}/libs/untsfsm/shared:" +
            "${buildDir}/libs/wemofsm/shared:" +
            "${buildDir}/libs/phlefsm/shared:" +
            "${buildDir}/libs/viziotvfsm/shared" +
            "${buildDir}/libs/roombafsm/shared").absolutePath
}

run {
    systemProperty "java.library.path", file("${buildDir}/libs/dlcfsm/shared:" +
            "${buildDir}/libs/untsfsm/shared:" +
            "${buildDir}/libs/wemofsm/shared:" +
            "${buildDir}/libs/phlefsm/shared" +
            "${buildDir}/libs/viziotvfsm/shared" +
            "${buildDir}/libs/roombafsm/shared").absolutePath
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'
    compile group: 'edu.cmu.sei.ttg', name: 'kalki-db', version: '0.0.4-SNAPSHOT'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    //compile group: 'org.json', name: 'json', version: '20180813'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
}

test.dependsOn 'dlcfsmSharedLibrary'
test.dependsOn 'wemofsmSharedLibrary'
test.dependsOn 'untsfsmSharedLibrary'
test.dependsOn 'phlefsmSharedLibrary'
test.dependsOn 'viziotvfsmSharedLibrary'
test.dependsOn 'roombafsmSharedLibrary'
run.dependsOn 'dlcfsmSharedLibrary'
run.dependsOn 'wemofsmSharedLibrary'
run.dependsOn 'untsfsmSharedLibrary'
run.dependsOn 'phlefsmSharedLibrary'
run.dependsOn 'viziotvfsmSharedLibrary'
run.dependsOn 'roombafsmSharedLibrary'
