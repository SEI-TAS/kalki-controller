
apply plugin: 'c'
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'edu.cmu.sei.ttg.kalki.controller.IOTController'

repositories {
    mavenLocal()
    mavenCentral()
}

model {
    components {
        all {
            sources.c.source {
                srcDir 'src/main/c'
            }
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
        
        dlcfsm(NativeLibrarySpec) {
            sources.c.source {
                include 'dlcfsm.c'
            }
        }
        
        phlefsm(NativeLibrarySpec){
            sources.c.source {
                include 'phlefsm.c'
            }
        }
        
        untsfsm(NativeLibrarySpec){
            sources.c.source {
                include 'untsfsm.c'
            }
        }
        
        wemofsm(NativeLibrarySpec){
            sources.c.source {
                include 'wemofsm.c'
            }
        }
    }
}

dependencies {
    implementation 'com.google.guava:guava:27.0.1-jre'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile group: 'edu.cmu.sei.ttg', name: 'kalki-db', version: '0.0.4-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/dlcfsm/shared:" +
            "${buildDir}/libs/untsfsm/shared:" +
            "${buildDir}/libs/wemofsm/shared:" +
            "${buildDir}/libs/phlefsm/shared").absolutePath
    useJUnitPlatform()
    dependsOn 'cleanTest'
}

run {
    systemProperty "java.library.path", file("${buildDir}/libs/dlcfsm/shared:" +
            "${buildDir}/libs/untsfsm/shared:" +
            "${buildDir}/libs/wemofsm/shared:" +
            "${buildDir}/libs/phlefsm/shared").absolutePath
}

test.dependsOn 'dlcfsmSharedLibrary'
test.dependsOn 'wemofsmSharedLibrary'
test.dependsOn 'untsfsmSharedLibrary'
test.dependsOn 'phlefsmSharedLibrary'

run.dependsOn 'dlcfsmSharedLibrary'
run.dependsOn 'wemofsmSharedLibrary'
run.dependsOn 'untsfsmSharedLibrary'
run.dependsOn 'phlefsmSharedLibrary'
