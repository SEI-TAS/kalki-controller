
apply plugin: 'c'
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'edu.cmu.sei.kalki.controller.Program'

compileJava {
    options.compilerArgs += ["-h", "src/fsm/headers"]
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'edu.cmu.sei.ttg:kalki-db:0.0.4-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

model {
    components {
        dlcfsm(NativeLibrarySpec)
        phlefsm(NativeLibrarySpec)
        untsfsm(NativeLibrarySpec)
        wemofsm(NativeLibrarySpec)

        all {
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    cCompiler.args '-dynamiclib'
                    linker.args '-mmacosx-version-min=10.9'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }

    }
}

// Copy all C FSM outputs into a single folder after assembling.
task fsmcopy (type: Copy) {
    dependsOn 'build'
    def tree = fileTree("${buildDir}/libs") {
        include '**/*.dylib'
        include '**/*.so'
        include '**/*.dll'
    }
    from tree.files
    into "${buildDir}/libs/fsm"
}

run {
    dependsOn 'fsmcopy'
    systemProperty "java.library.path", file("${buildDir}/libs/fsm").absolutePath
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/fsm").absolutePath
    useJUnitPlatform()
}
